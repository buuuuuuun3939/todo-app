require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  
  # ok
  describe "GET #index" do
    it "renders a successful response" do
      #User.create! valid_attributes
      get users_url
      expect(response).to be_successful
    end
  end

  # ok
  describe "GET #show" do
    let(:id) {1}
    it "renders a successful response" do
      get users_url(id)
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    # ok
    context "with valid parameters" do
      it "creates a new User" do
        request_body = {display_name:"hoge", email:"hoge@gmail.com", password:"password1010", password_confirmation:"password1010"}
        expect {
          post users_url, params: (request_body), as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(1)
      end
    end
    #  it "redirects to the created user" do
    #    post users_url, params: { user: valid_attributes }
    #    expect(response).to redirect_to(user_url(User.last))
    #  end
    #end

    #context "with invalid parameters" do
    #  it "does not create a new User" do
    #    expect {
    #      post users_url, params: { user: invalid_attributes }
    #    }.to change(User, :count).by(0)
    #  end

    #  it "renders a successful response (i.e. to display the 'new' template)" do
    #    post users_url, params: { user: invalid_attributes }
    #    expect(response).to be_successful
    # end
    #end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        old_info = '{ 
                      display_name: "hoge",
                      email: "hoge@gmail.com",
                      password: "password", 
                      password_confirmation: "password"
                    }'

        update_info =  '{
                          display_name: "hoge",
                          email: "hoge@gmail.com",
                          old_password: "password", 
                          password: 1234567890,
                          password_confirmation: 1234567890
                        }'
        post users_path, params: old_info, as: :json, headers: { 'Content-Type' => 'application/json' }
      end

      it "updates the requested user" do
        expect {
          patch users_path/1, params: old_info, as: :json, headers: { 'Content-Type' => 'application/json' } 
          user.reload
        }
      end
    end

  #  context "with invalid parameters" do
  #    it "renders a successful response (i.e. to display the 'edit' template)" do
  #      user = User.create! valid_attributes
  #      patch user_url(user), params: { user: invalid_attributes }
  #      expect(response).to be_successful
  #    end
  #  end
  end
end
