require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  
  # ok
  describe "GET #index" do
    example "200が返却される" do
      request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}

      expect {
        post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
      }.to change(User, :count).by(1)
      expect(response).to be_successful
      expect(response).to have_http_status 201
      expect(session[:user_id]).not_to eq nil
      
      get users_path
      expect(response).to be_successful
      expect(response).to have_http_status 200
    end
  end

  describe "POST #create" do
    # ok
    context "with valid parameters" do
      example "ユーザー作成に成功する" do 
        # ちゃんとFactoryBotで書きたい
        request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}

        expect {
          post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(1)
        expect(response).to be_successful
        expect(response).to have_http_status 201
        expect(session[:user_id]).not_to eq nil #本来ならここでsession_idが返ってきているはず
      end
    end
    context "with a invalid password" do
      context "not enough a upper case" do
        example "ユーザー作成に失敗する" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "password1", password_confirmation: "password1"}
          
          expect {
            post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(0)
          expect(response).not_to be_successful
          expect(response).to have_http_status 400
        end
      end
      context "not enough a number" do
        example "ユーザー作成に失敗する" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Password", password_confirmation: "Password"}
          
          expect {
            post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(0)
          expect(response).not_to be_successful
          expect(response).to have_http_status 400
        end
      end
      context "not enough length" do
        example "ユーザー作成に失敗する" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0r", password_confirmation: "Passw0r"}
          
          expect {
            post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(0)
          expect(response).not_to be_successful
          expect(response).to have_http_status 400 
        end
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:user_id) {(session[:user_id].to_s).slice!(0,3)}
      example "ユーザー情報が更新される" do
        request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
        expect {
          post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(1)
        
        old_info = {
                    display_name: "sample_user",
                    email: "sample@gmail.com",
                    password: "Passw0rd", 
                    password_confirmation: "Passw0rd"
                    }
        new_info =  {
                      display_name: "user1",
                      email: "user1@gmail.com",
                      old_password: "Passw0rd", 
                      password: "Passw0rd1010",
                      password_confirmation: "Passw0rd1010"
                    }
        target_path = "/users/" + user_id
        expect {
          patch target_path, params: new_info, as: :json, headers: { 'Content-Type' => 'application/json' }        
        }.to change(User, :count).by(0) # ユーザーの数が変わっていないことを確認
        expect(response).to be_successful
        expect(response).to have_http_status 200
      end
    end
    context "with invalid parameters" do
      let(:user_id) {(session[:user_id].to_s).slice!(0,3)}
      context "invalid old password" do
        example "ユーザー情報が更新されない" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
          expect {
            post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(1)
            
          old_info = {
                      display_name: "sample_user",
                      email: "sample@gmail.com",
                      password: "Passw0rd", 
                      password_confirmation: "Passw0rd"
                      }
          new_info =  {
                        display_name: "user1",
                        email: "user1@gmail.com",
                        old_password: "Passw0rd_HOGEHOGE", 
                        password: "Passw0rd1010",
                        password_confirmation: "Passw0rd1010"
                      }
          target_path = "/users/" + user_id
          expect {
            patch target_path, params: new_info, as: :json, headers: { 'Content-Type' => 'application/json' }        
          }.to change(User, :count).by(0) # ユーザーの数が変わっていないことを確認
          expect(response).not_to be_successful
          expect(response).to have_http_status 401
       end
      end
      context "difference password_confirmation" do
        example "ユーザー情報が更新されない" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
          expect {
            post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(1)
            
          old_info = {
                      display_name: "sample_user",
                      email: "sample@gmail.com",
                      password: "Passw0rd", 
                      password_confirmation: "Passw0rd"
                      }
          new_info =  {
                        display_name: "user1",
                        email: "user1@gmail.com",
                        old_password: "Passw0rd", 
                        password: "Passw0rd1010",
                        password_confirmation: "Passw0rd1010_HOGEHOGE"
                      }
          target_path = "/users/" + user_id
          expect {
            patch target_path, params: new_info, as: :json, headers: { 'Content-Type' => 'application/json' }        
          }.to change(User, :count).by(0) # ユーザーの数が変わっていないことを確認
          expect(response).not_to be_successful
          expect(response).to have_http_status 400
       end
      end
    end
  end
end
