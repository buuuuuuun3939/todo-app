require 'rails_helper'
#require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Sessions", type: :request do

  describe "POST /auth" do
    context "with valid parameters" do
      example "新規セッションが作成され、ログインできる" do
        # 準備としてユーザーを新規に作成
        request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
        expect {
          post users_path params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(1)
        
        login_params = {email: "sample@gmail.com", password: "Passw0rd"}
        expect {
          post auth_path params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(0) # userを作ってるわけじゃないからuserの数が増えてないことを確認する
        expect(response).to have_http_status 201
        expect(response.body).to include("sample_user")

        # 以下はなぜか値を変えてもテストが通る
        #expect {
        #  response.to have_http_status 201  
        #  response.to include("session_id")
        #}
      end
    end
    context "with invalid parameters" do
      context "invalid email" do
        example "新規セッションが作成されず、ログインできない" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
          expect {
            post users_path params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(1)
        
          login_params = {email: "hoge@gmail.com", password: "Passw0rd"}
          expect {
            post auth_path params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(0) # userを作ってるわけじゃないからuserの数が増えてないことを確認する
          expect(response).to have_http_status 400
          expect(response.body).not_to include("sample_user")
        end
      end
      context "invalid password" do
        example "新規セッションが作成されず、ログインできない" do
          request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
          expect {
            post users_path params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(1)
        
          login_params = {email: "sample@gmail.com", password: "Passw0rd_hoge"}
          expect {
            post auth_path params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
          }.to change(User, :count).by(0) # userを作ってるわけじゃないからuserの数が増えてないことを確認する
          expect(response).to have_http_status 400
          expect(response.body).not_to include("sample_user")
        end
      end
    end
  end

  describe "DELETE #destroy" do
    #let(:rspec_session) {{ user_id: 1}}
    context "a delete request with session" do
      example "セッションが削除され、ログアウトする" do
        
        # 準備としてユーザーを新規に作成
        request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
        expect {
          post users_path params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(1)

        login_params = {email: "sample@gmail.com", password: "Passw0rd"}
        expect {
          post auth_path params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(0) # userを作ってるわけじゃないからuserの数が増えてないことを確認する
        
        delete auth_path
        expect(response).to have_http_status 204
      end
    end
    context "a request without session" do
      example "セッションが削除されず、ログインされない" do
       # 準備としてユーザーを新規に作成
       request_body = {display_name: "sample_user", email: "sample@gmail.com", password: "Passw0rd", password_confirmation: "Passw0rd"}
       expect {
         post users_path params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
       }.to change(User, :count).by(1)

       login_params = {email: "sample@gmail.com", password: "Passw0rd"}
       expect {
         post auth_path params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
       }.to change(User, :count).by(0) # userを作ってるわけじゃないからuserの数が増えてないことを確認する

       # delete requestのときにsessionを削除してrequestする実装方法を調べる
       #session[:user_id] = nil
       #Capybara.reset_sessions! # うまく動かない
       #delete auth_path
       #expect(response).to have_http_status 401 
      end
    end
  end
end
