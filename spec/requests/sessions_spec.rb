require 'rails_helper'
#require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Sessions", type: :request do

  describe "POST /auth" do
    context "with valid parameters" do
      example "新規セッションが作成され、ログインできる" do
        # 準備としてユーザーを新規に作成
        request_body = {display_name: "hoge", email: "hoge@gmail.com", password: "1passworD", password_confirmation: "1passworD"}
        post users_path, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }

        login_params = {email: "hoge@gmail.com", password: "1passworD"}
        expect {
          post auth_path, params: login_params, as: :json, headers: { 'Content-Type' => 'application/json' }
        }.to change(User, :count).by(0) # SessionDBを作ってるわけじゃないからuserの数が増えてないことを確認する
        expect {
          response.to have_http_status 201
          response.to include("session_id")
        }
      end
    end
    #context "with invalid parameters" do
    #end
  end

  #  context "with invalid parameters" do
  #    it "does not create a new Session" do
  #      user = FactoryBot.create(:user) 
  #      expect {
  #        post sessions_url, params: { session: {email: "", password: user.password } }
  #      }.to change(User, :count).by(0)
        #expect(session[:user_id]).to eq(user.id)
  #    end
  #  end
  #end

  #describe "DELETE #destroy" do
  #  let(:rspec_session) {{ user_id: 1}}
  #  it "destroys the requested session" do
      
      # 準備としてユーザーを新規に作成
  #    request_body = {display_name: "hoge", email: "hoge@gmail.com", password: "1passworD", password_confirmation: "1passworD"}
  #    post users_url, params: request_body, as: :json, headers: { 'Content-Type' => 'application/json' }
  #    json ||= JSON.parse(last_response.body)
  #      print(json)
      
  #    login_params = {email: "hoge@gmail.com", password: "1passworD"}
  #    post auth_path, params: login_params
  #    json ||= JSON.parse(last_response.body)
  #      print(json)

      #with_session(:user_1) do
      #  delete auth_path
        #request_body = {display_name: "hoge", email: "hoge@gmail.com", password: "1passworD", password_confirmation: "1passworD"}
        #post users_url, params: (request_body), as: :json, headers: { 'Content-Type' => 'application/json' }
        #login_params = {email: "hoge@gmail.com", password: "1passworD"}
      #  json ||= JSON.parse(last_response.body)
      #  print(json)
  #    end

      #print(response.headers)
      #page.get_rack_session(user_id: 1)
      
      #print(response.cookies)
      #delete auth_path headers: response.cookies
      #print(response.headers)
      #print("\n")
      #print(request_body)
      #print("\n")
      #print(response.status)
      #expect {
        #print(response.headers)
        #response.to be_successful
        #response.to have_http_status 201
        #(session[:user_id]).to !eq(user.id) # 後で.to change()での実装方法を調べる。
        #(response.get_rack_session_key('user_id').nil?)  
      #}
  #  end
  #end
end
