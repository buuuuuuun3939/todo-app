require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Sessions", type: :request do
  describe "POST /auth" do
    # ok
    context "with valid parameters" do
      it "creates a new Session" do
        user = FactoryBot.create(:user) 
        expect {
          post auth_path, params: { session: {email: user.email, password: user.password } }
        }.to change(User, :count).by(0) # SessionDBを作ってるわけじゃないからuserの数が増えてないことを確認する
        expect(session[:user_id]).to eq(user.id)
      end
    end

  #  context "with invalid parameters" do
  #    it "does not create a new Session" do
  #      user = FactoryBot.create(:user) 
  #      expect {
  #        post sessions_url, params: { session: {email: "", password: user.password } }
  #      }.to change(User, :count).by(0)
        #expect(session[:user_id]).to eq(user.id)
  #    end
  #  end
  end

  describe "DELETE #destroy" do
    before do
      user = FactoryBot.create(:user)
      post auth_path, params: { session: {email: user.email, password: user.password } }
    end

    it "destroys the requested session" do
      expect {
        delete auth_path
        (session[:user_id]).to !eq(user.id) # 後で.to change()での実装方法を調べる。
      }
    end
  end
end
